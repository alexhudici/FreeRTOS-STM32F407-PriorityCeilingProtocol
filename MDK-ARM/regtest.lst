


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ;FreeRTOS V8.0.0 - Copyright (C) 2014 Real Time Engineer
                       s Ltd. 
    3 00000000         ;All rights reserved
    4 00000000         
    5 00000000         ;VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING T
                       HE LATEST VERSION.
    6 00000000         
    7 00000000         ;*******************************************************
                       ********************
    8 00000000         ;*                                                      
                                        *
    9 00000000         ;*    FreeRTOS provides completely free yet professional
                       ly developed,    *
   10 00000000         ;*    robust, strictly quality controlled, supported, an
                       d cross          *
   11 00000000         ;*    platform software that has become a de facto stand
                       ard.             *
   12 00000000         ;*                                                      
                                        *
   13 00000000         ;*    Help yourself get started quickly and support the 
                       FreeRTOS         *
   14 00000000         ;*    project by purchasing a FreeRTOS tutorial book, re
                       ference          *
   15 00000000         ;*    manual, or both from: http://www.FreeRTOS.org/Docu
                       mentation        *
   16 00000000         ;*                                                      
                                        *
   17 00000000         ;*    Thank you!                                        
                                        *
   18 00000000         ;*                                                      
                                        *
   19 00000000         ;*******************************************************
                       ********************
   20 00000000         
   21 00000000         ;This file is part of the FreeRTOS distribution.
   22 00000000         
   23 00000000         ;FreeRTOS is free software; you can redistribute it and/
                       or modify it under
   24 00000000         ;the terms of the GNU General Public License (version 2)
                        as published by the
   25 00000000         ;Free Software Foundation >>!AND MODIFIED BY!<< the Free
                       RTOS exception.
   26 00000000         
   27 00000000         ;>>! NOTE: The modification to the GPL is included to al
                       low you to distribute
   28 00000000         ;>>! a combined work that includes FreeRTOS without bein
                       g obliged to provide
   29 00000000         ;>>! the source code for proprietary components outside 
                       of the FreeRTOS
   30 00000000         ;>>! kernel.
   31 00000000         
   32 00000000         ;FreeRTOS is distributed in the hope that it will be use
                       ful, but WITHOUT ANY
   33 00000000         ;WARRANTY; without even the implied warranty of MERCHANT
                       ABILITY or FITNESS
   34 00000000         ;FOR A PARTICULAR PURPOSE.  Full license text is availab
                       le from the following
   35 00000000         ;link: http://www.freertos.org/a00114.html



ARM Macro Assembler    Page 2 


   36 00000000         
   37 00000000         ;1 tab == 4 spaces!
   38 00000000         
   39 00000000         ;*******************************************************
                       ********************
   40 00000000         ;*                                                      
                                        *
   41 00000000         ;*    Having a problem?  Start by reading the FAQ "My ap
                       plication does   *
   42 00000000         ;*    not run, what could be wrong?"                    
                                        *
   43 00000000         ;*                                                      
                                        *
   44 00000000         ;*    http://www.FreeRTOS.org/FAQHelp.html              
                                        *
   45 00000000         ;*                                                      
                                        *
   46 00000000         ;*******************************************************
                       ********************
   47 00000000         
   48 00000000         ;http://www.FreeRTOS.org - Documentation, books, trainin
                       g, latest versions,
   49 00000000         ;license and Real Time Engineers Ltd. contact details.
   50 00000000         
   51 00000000         ;http://www.FreeRTOS.org/plus - A selection of FreeRTOS 
                       ecosystem products,
   52 00000000         ;including FreeRTOS+Trace - an indispensable productivit
                       y tool, a DOS
   53 00000000         ;compatible FAT file system, and our tiny thread aware U
                       DP/IP stack.
   54 00000000         
   55 00000000         ;http://www.OpenRTOS.com - Real Time Engineers ltd licen
                       se FreeRTOS to High
   56 00000000         ;Integrity Systems to sell under the OpenRTOS brand.  Lo
                       w cost OpenRTOS
   57 00000000         ;licenses offer ticketed support, indemnification and mi
                       ddleware.
   58 00000000         
   59 00000000         ;http://www.SafeRTOS.com - High Integrity Systems also p
                       rovide a safety
   60 00000000         ;engineered and independently SIL3 certified version for
                        use in safety and
   61 00000000         ;mission critical applications that require provable dep
                       endability.
   62 00000000         
   63 00000000         ;1 tab == 4 spaces!
   64 00000000         ;*/
   65 00000000         
   66 00000000         ;#include <FreeRTOSConfig.h>
   67 00000000         
   68 00000000         
   69 00000000         ;RSEG    CODE:CODE(2)
   70 00000000         ;thumb
   71 00000000         
   72 00000000                 EXTERN           ulRegTest1LoopCounter
   73 00000000                 EXTERN           ulRegTest2LoopCounter
   74 00000000                 AREA             |.text|, CODE, READONLY
   75 00000000                 EXPORT           vRegTest1Task
   76 00000000                 EXPORT           vRegTest2Task



ARM Macro Assembler    Page 3 


   77 00000000                 EXPORT           vRegTestClearFlopRegistersToPar
ameterValue
   78 00000000                 EXPORT           ulRegTestCheckFlopRegistersCont
ainParameterValue
   79 00000000         
   80 00000000         ;/*-----------------------------------------------------
                       ------*/
   81 00000000         
   82 00000000         vRegTest1Task
                               PROC
   83 00000000         
   84 00000000         ; /* Fill the core registers with known values. */
   85 00000000 F04F 0064       mov              r0, #100
   86 00000004 F04F 0165       mov              r1, #101
   87 00000008 F04F 0266       mov              r2, #102
   88 0000000C F04F 0367       mov              r3, #103
   89 00000010 F04F 0468       mov              r4, #104
   90 00000014 F04F 0569       mov              r5, #105
   91 00000018 F04F 066A       mov              r6, #106
   92 0000001C F04F 076B       mov              r7, #107
   93 00000020 F04F 086C       mov              r8, #108
   94 00000024 F04F 096D       mov              r9, #109
   95 00000028 F04F 0A6E       mov              r10, #110
   96 0000002C F04F 0B6F       mov              r11, #111
   97 00000030 F04F 0C70       mov              r12, #112
   98 00000034         
   99 00000034         ; /* Fill the VFP registers with known values. */
  100 00000034 EC41 0B10       vmov             d0, r0, r1
  101 00000038 EC43 2B11       vmov             d1, r2, r3
  102 0000003C EC45 4B12       vmov             d2, r4, r5
  103 00000040 EC47 6B13       vmov             d3, r6, r7
  104 00000044 EC49 8B14       vmov             d4, r8, r9
  105 00000048 EC4B AB15       vmov             d5, r10, r11
  106 0000004C EC41 0B16       vmov             d6, r0, r1
  107 00000050 EC43 2B17       vmov             d7, r2, r3
  108 00000054 EC45 4B18       vmov             d8, r4, r5
  109 00000058 EC47 6B19       vmov             d9, r6, r7
  110 0000005C EC49 8B1A       vmov             d10, r8, r9
  111 00000060 EC4B AB1B       vmov             d11, r10, r11
  112 00000064 EC41 0B1C       vmov             d12, r0, r1
  113 00000068 EC43 2B1D       vmov             d13, r2, r3
  114 0000006C EC45 4B1E       vmov             d14, r4, r5
  115 00000070 EC47 6B1F       vmov             d15, r6, r7
  116 00000074         
  117 00000074         reg1_loop
  118 00000074         ; /* Check all the VFP registers still contain the value
                       s set above.
  119 00000074         ; First save registers that are clobbered by the test. *
                       /
  120 00000074 B403            push             { r0-r1 }
  121 00000076         
  122 00000076 EC51 0B10       vmov             r0, r1, d0
  123 0000007A 2864            cmp              r0, #100
  124 0000007C D15D            bne              reg1_error_loopf
  125 0000007E 2965            cmp              r1, #101
  126 00000080 D15B            bne              reg1_error_loopf
  127 00000082 EC51 0B11       vmov             r0, r1, d1
  128 00000086 2866            cmp              r0, #102
  129 00000088 D157            bne              reg1_error_loopf



ARM Macro Assembler    Page 4 


  130 0000008A 2967            cmp              r1, #103
  131 0000008C D155            bne              reg1_error_loopf
  132 0000008E EC51 0B12       vmov             r0, r1, d2
  133 00000092 2868            cmp              r0, #104
  134 00000094 D151            bne              reg1_error_loopf
  135 00000096 2969            cmp              r1, #105
  136 00000098 D14F            bne              reg1_error_loopf
  137 0000009A EC51 0B13       vmov             r0, r1, d3
  138 0000009E 286A            cmp              r0, #106
  139 000000A0 D14B            bne              reg1_error_loopf
  140 000000A2 296B            cmp              r1, #107
  141 000000A4 D149            bne              reg1_error_loopf
  142 000000A6 EC51 0B14       vmov             r0, r1, d4
  143 000000AA 286C            cmp              r0, #108
  144 000000AC D145            bne              reg1_error_loopf
  145 000000AE 296D            cmp              r1, #109
  146 000000B0 D143            bne              reg1_error_loopf
  147 000000B2 EC51 0B15       vmov             r0, r1, d5
  148 000000B6 286E            cmp              r0, #110
  149 000000B8 D13F            bne              reg1_error_loopf
  150 000000BA 296F            cmp              r1, #111
  151 000000BC D13D            bne              reg1_error_loopf
  152 000000BE EC51 0B16       vmov             r0, r1, d6
  153 000000C2 2864            cmp              r0, #100
  154 000000C4 D139            bne              reg1_error_loopf
  155 000000C6 2965            cmp              r1, #101
  156 000000C8 D137            bne              reg1_error_loopf
  157 000000CA EC51 0B17       vmov             r0, r1, d7
  158 000000CE 2866            cmp              r0, #102
  159 000000D0 D133            bne              reg1_error_loopf
  160 000000D2 2967            cmp              r1, #103
  161 000000D4 D131            bne              reg1_error_loopf
  162 000000D6 EC51 0B18       vmov             r0, r1, d8
  163 000000DA 2868            cmp              r0, #104
  164 000000DC D12D            bne              reg1_error_loopf
  165 000000DE 2969            cmp              r1, #105
  166 000000E0 D12B            bne              reg1_error_loopf
  167 000000E2 EC51 0B19       vmov             r0, r1, d9
  168 000000E6 286A            cmp              r0, #106
  169 000000E8 D127            bne              reg1_error_loopf
  170 000000EA 296B            cmp              r1, #107
  171 000000EC D125            bne              reg1_error_loopf
  172 000000EE EC51 0B1A       vmov             r0, r1, d10
  173 000000F2 286C            cmp              r0, #108
  174 000000F4 D121            bne              reg1_error_loopf
  175 000000F6 296D            cmp              r1, #109
  176 000000F8 D11F            bne              reg1_error_loopf
  177 000000FA EC51 0B1B       vmov             r0, r1, d11
  178 000000FE 286E            cmp              r0, #110
  179 00000100 D11B            bne              reg1_error_loopf
  180 00000102 296F            cmp              r1, #111
  181 00000104 D119            bne              reg1_error_loopf
  182 00000106 EC51 0B1C       vmov             r0, r1, d12
  183 0000010A 2864            cmp              r0, #100
  184 0000010C D115            bne              reg1_error_loopf
  185 0000010E 2965            cmp              r1, #101
  186 00000110 D113            bne              reg1_error_loopf
  187 00000112 EC51 0B1D       vmov             r0, r1, d13
  188 00000116 2866            cmp              r0, #102



ARM Macro Assembler    Page 5 


  189 00000118 D10F            bne              reg1_error_loopf
  190 0000011A 2967            cmp              r1, #103
  191 0000011C D10D            bne              reg1_error_loopf
  192 0000011E EC51 0B1E       vmov             r0, r1, d14
  193 00000122 2868            cmp              r0, #104
  194 00000124 D109            bne              reg1_error_loopf
  195 00000126 2969            cmp              r1, #105
  196 00000128 D107            bne              reg1_error_loopf
  197 0000012A EC51 0B1F       vmov             r0, r1, d15
  198 0000012E 286A            cmp              r0, #106
  199 00000130 D103            bne              reg1_error_loopf
  200 00000132 296B            cmp              r1, #107
  201 00000134 D101            bne              reg1_error_loopf
  202 00000136         
  203 00000136         ; /* Restore the registers that were clobbered by the te
                       st. */
  204 00000136 BC03            pop              {r0-r1}
  205 00000138         
  206 00000138         ; /* VFP register test passed.  Jump to the core registe
                       r test. */
  207 00000138 E000            b                reg1_loopf_pass
  208 0000013A         
  209 0000013A         reg1_error_loopf
  210 0000013A         ; /* If this line is hit then a VFP register value was f
                       ound to be
  211 0000013A         ; incorrect. */
  212 0000013A E7FE            b                reg1_error_loopf
  213 0000013C         
  214 0000013C         reg1_loopf_pass
  215 0000013C         
  216 0000013C 2864            cmp              r0, #100
  217 0000013E D123            bne              reg1_error_loop
  218 00000140 2965            cmp              r1, #101
  219 00000142 D121            bne              reg1_error_loop
  220 00000144 2A66            cmp              r2, #102
  221 00000146 D11F            bne              reg1_error_loop
  222 00000148 2B67            cmp              r3, #103
  223 0000014A D11D            bne              reg1_error_loop
  224 0000014C 2C68            cmp              r4, #104
  225 0000014E D11B            bne              reg1_error_loop
  226 00000150 2D69            cmp              r5, #105
  227 00000152 D119            bne              reg1_error_loop
  228 00000154 2E6A            cmp              r6, #106
  229 00000156 D117            bne              reg1_error_loop
  230 00000158 2F6B            cmp              r7, #107
  231 0000015A D115            bne              reg1_error_loop
  232 0000015C F1B8 0F6C       cmp              r8, #108
  233 00000160 D112            bne              reg1_error_loop
  234 00000162 F1B9 0F6D       cmp              r9, #109
  235 00000166 D10F            bne              reg1_error_loop
  236 00000168 F1BA 0F6E       cmp              r10, #110
  237 0000016C D10C            bne              reg1_error_loop
  238 0000016E F1BB 0F6F       cmp              r11, #111
  239 00000172 D109            bne              reg1_error_loop
  240 00000174 F1BC 0F70       cmp              r12, #112
  241 00000178 D106            bne              reg1_error_loop
  242 0000017A         
  243 0000017A         ; /* Everything passed, increment the loop counter. */
  244 0000017A B403            push             { r0-r1 }



ARM Macro Assembler    Page 6 


  245 0000017C 4893            ldr              r0, =ulRegTest1LoopCounter
  246 0000017E 6801            ldr              r1, [r0]
  247 00000180 1C49            adds             r1, r1, #1
  248 00000182 6001            str              r1, [r0]
  249 00000184 BC03            pop              { r0-r1 }
  250 00000186         
  251 00000186         ; /* Start again. */
  252 00000186 E775            b                reg1_loop
  253 00000188         
  254 00000188         reg1_error_loop
  255 00000188         ; /* If this line is hit then there was an error in a co
                       re register value.
  256 00000188         ; The loop ensures the loop counter stops incrementing. 
                       */
  257 00000188 E7FE            b                reg1_error_loop
  258 0000018A                 ENDP
  259 0000018A         ;/*-----------------------------------------------------
                       ------*/
  260 0000018A         
  261 0000018A         
  262 0000018A         vRegTest2Task
                               PROC
  263 0000018A         
  264 0000018A         ; /* Set all the core registers to known values. */
  265 0000018A F04F 30FF       mov              r0, #-1
  266 0000018E F04F 0101       mov              r1, #1
  267 00000192 F04F 0202       mov              r2, #2
  268 00000196 F04F 0303       mov              r3, #3
  269 0000019A F04F 0404       mov              r4, #4
  270 0000019E F04F 0505       mov              r5, #5
  271 000001A2 F04F 0606       mov              r6, #6
  272 000001A6 F04F 0707       mov              r7, #7
  273 000001AA F04F 0808       mov              r8, #8
  274 000001AE F04F 0909       mov              r9, #9
  275 000001B2 F04F 0A0A       mov              r10, #10
  276 000001B6 F04F 0B0B       mov              r11, #11
  277 000001BA F04F 0C0C       mov              r12, #12
  278 000001BE         
  279 000001BE         ; /* Set all the VFP to known values. */
  280 000001BE EC41 0B10       vmov             d0, r0, r1
  281 000001C2 EC43 2B11       vmov             d1, r2, r3
  282 000001C6 EC45 4B12       vmov             d2, r4, r5
  283 000001CA EC47 6B13       vmov             d3, r6, r7
  284 000001CE EC49 8B14       vmov             d4, r8, r9
  285 000001D2 EC4B AB15       vmov             d5, r10, r11
  286 000001D6 EC41 0B16       vmov             d6, r0, r1
  287 000001DA EC43 2B17       vmov             d7, r2, r3
  288 000001DE EC45 4B18       vmov             d8, r4, r5
  289 000001E2 EC47 6B19       vmov             d9, r6, r7
  290 000001E6 EC49 8B1A       vmov             d10, r8, r9
  291 000001EA EC4B AB1B       vmov             d11, r10, r11
  292 000001EE EC41 0B1C       vmov             d12, r0, r1
  293 000001F2 EC43 2B1D       vmov             d13, r2, r3
  294 000001F6 EC45 4B1E       vmov             d14, r4, r5
  295 000001FA EC47 6B1F       vmov             d15, r6, r7
  296 000001FE         
  297 000001FE         reg2_loop
  298 000001FE         
  299 000001FE         ; /* Check all the VFP registers still contain the value



ARM Macro Assembler    Page 7 


                       s set above.
  300 000001FE         ; First save registers that are clobbered by the test. *
                       /
  301 000001FE B403            push             { r0-r1 }
  302 00000200         
  303 00000200 EC51 0B10       vmov             r0, r1, d0
  304 00000204 F1B0 3FFF       cmp              r0, #-1
  305 00000208 D15F            bne              reg2_error_loopf
  306 0000020A 2901            cmp              r1, #1
  307 0000020C D15D            bne              reg2_error_loopf
  308 0000020E EC51 0B11       vmov             r0, r1, d1
  309 00000212 2802            cmp              r0, #2
  310 00000214 D159            bne              reg2_error_loopf
  311 00000216 2903            cmp              r1, #3
  312 00000218 D157            bne              reg2_error_loopf
  313 0000021A EC51 0B12       vmov             r0, r1, d2
  314 0000021E 2804            cmp              r0, #4
  315 00000220 D153            bne              reg2_error_loopf
  316 00000222 2905            cmp              r1, #5
  317 00000224 D151            bne              reg2_error_loopf
  318 00000226 EC51 0B13       vmov             r0, r1, d3
  319 0000022A 2806            cmp              r0, #6
  320 0000022C D14D            bne              reg2_error_loopf
  321 0000022E 2907            cmp              r1, #7
  322 00000230 D14B            bne              reg2_error_loopf
  323 00000232 EC51 0B14       vmov             r0, r1, d4
  324 00000236 2808            cmp              r0, #8
  325 00000238 D147            bne              reg2_error_loopf
  326 0000023A 2909            cmp              r1, #9
  327 0000023C D145            bne              reg2_error_loopf
  328 0000023E EC51 0B15       vmov             r0, r1, d5
  329 00000242 280A            cmp              r0, #10
  330 00000244 D141            bne              reg2_error_loopf
  331 00000246 290B            cmp              r1, #11
  332 00000248 D13F            bne              reg2_error_loopf
  333 0000024A EC51 0B16       vmov             r0, r1, d6
  334 0000024E F1B0 3FFF       cmp              r0, #-1
  335 00000252 D13A            bne              reg2_error_loopf
  336 00000254 2901            cmp              r1, #1
  337 00000256 D138            bne              reg2_error_loopf
  338 00000258 EC51 0B17       vmov             r0, r1, d7
  339 0000025C 2802            cmp              r0, #2
  340 0000025E D134            bne              reg2_error_loopf
  341 00000260 2903            cmp              r1, #3
  342 00000262 D132            bne              reg2_error_loopf
  343 00000264 EC51 0B18       vmov             r0, r1, d8
  344 00000268 2804            cmp              r0, #4
  345 0000026A D12E            bne              reg2_error_loopf
  346 0000026C 2905            cmp              r1, #5
  347 0000026E D12C            bne              reg2_error_loopf
  348 00000270 EC51 0B19       vmov             r0, r1, d9
  349 00000274 2806            cmp              r0, #6
  350 00000276 D128            bne              reg2_error_loopf
  351 00000278 2907            cmp              r1, #7
  352 0000027A D126            bne              reg2_error_loopf
  353 0000027C EC51 0B1A       vmov             r0, r1, d10
  354 00000280 2808            cmp              r0, #8
  355 00000282 D122            bne              reg2_error_loopf
  356 00000284 2909            cmp              r1, #9



ARM Macro Assembler    Page 8 


  357 00000286 D120            bne              reg2_error_loopf
  358 00000288 EC51 0B1B       vmov             r0, r1, d11
  359 0000028C 280A            cmp              r0, #10
  360 0000028E D11C            bne              reg2_error_loopf
  361 00000290 290B            cmp              r1, #11
  362 00000292 D11A            bne              reg2_error_loopf
  363 00000294 EC51 0B1C       vmov             r0, r1, d12
  364 00000298 F1B0 3FFF       cmp              r0, #-1
  365 0000029C D115            bne              reg2_error_loopf
  366 0000029E 2901            cmp              r1, #1
  367 000002A0 D113            bne              reg2_error_loopf
  368 000002A2 EC51 0B1D       vmov             r0, r1, d13
  369 000002A6 2802            cmp              r0, #2
  370 000002A8 D10F            bne              reg2_error_loopf
  371 000002AA 2903            cmp              r1, #3
  372 000002AC D10D            bne              reg2_error_loopf
  373 000002AE EC51 0B1E       vmov             r0, r1, d14
  374 000002B2 2804            cmp              r0, #4
  375 000002B4 D109            bne              reg2_error_loopf
  376 000002B6 2905            cmp              r1, #5
  377 000002B8 D107            bne              reg2_error_loopf
  378 000002BA EC51 0B1F       vmov             r0, r1, d15
  379 000002BE 2806            cmp              r0, #6
  380 000002C0 D103            bne              reg2_error_loopf
  381 000002C2 2907            cmp              r1, #7
  382 000002C4 D101            bne              reg2_error_loopf
  383 000002C6         
  384 000002C6         ; /* Restore the registers that were clobbered by the te
                       st. */
  385 000002C6 BC03            pop              {r0-r1}
  386 000002C8         
  387 000002C8         ; /* VFP register test passed.  Jump to the core registe
                       r test. */
  388 000002C8 E000            b                reg2_loopf_pass
  389 000002CA         
  390 000002CA         reg2_error_loopf
  391 000002CA         ; /* If this line is hit then a VFP register value was f
                       ound to be
  392 000002CA         ; incorrect. */
  393 000002CA E7FE            b                reg2_error_loopf
  394 000002CC         
  395 000002CC         reg2_loopf_pass
  396 000002CC         
  397 000002CC F1B0 3FFF       cmp              r0, #-1
  398 000002D0 D123            bne              reg2_error_loop
  399 000002D2 2901            cmp              r1, #1
  400 000002D4 D121            bne              reg2_error_loop
  401 000002D6 2A02            cmp              r2, #2
  402 000002D8 D11F            bne              reg2_error_loop
  403 000002DA 2B03            cmp              r3, #3
  404 000002DC D11D            bne              reg2_error_loop
  405 000002DE 2C04            cmp              r4, #4
  406 000002E0 D11B            bne              reg2_error_loop
  407 000002E2 2D05            cmp              r5, #5
  408 000002E4 D119            bne              reg2_error_loop
  409 000002E6 2E06            cmp              r6, #6
  410 000002E8 D117            bne              reg2_error_loop
  411 000002EA 2F07            cmp              r7, #7
  412 000002EC D115            bne              reg2_error_loop



ARM Macro Assembler    Page 9 


  413 000002EE F1B8 0F08       cmp              r8, #8
  414 000002F2 D112            bne              reg2_error_loop
  415 000002F4 F1B9 0F09       cmp              r9, #9
  416 000002F8 D10F            bne              reg2_error_loop
  417 000002FA F1BA 0F0A       cmp              r10, #10
  418 000002FE D10C            bne              reg2_error_loop
  419 00000300 F1BB 0F0B       cmp              r11, #11
  420 00000304 D109            bne              reg2_error_loop
  421 00000306 F1BC 0F0C       cmp              r12, #12
  422 0000030A D106            bne              reg2_error_loop
  423 0000030C         
  424 0000030C         ; /* Increment the loop counter to indicate this test is
                        still functioning
  425 0000030C         ; correctly. */
  426 0000030C B403            push             { r0-r1 }
  427 0000030E 4830            ldr              r0, =ulRegTest2LoopCounter
  428 00000310 6801            ldr              r1, [r0]
  429 00000312 1C49            adds             r1, r1, #1
  430 00000314 6001            str              r1, [r0]
  431 00000316 BC03            pop              { r0-r1 }
  432 00000318         
  433 00000318         ; /* Start again. */
  434 00000318 E771            b                reg2_loop
  435 0000031A         
  436 0000031A         reg2_error_loop
  437 0000031A         ; /* If this line is hit then there was an error in a co
                       re register value.
  438 0000031A         ; This loop ensures the loop counter variable stops incr
                       ementing. */
  439 0000031A E7FE            b                reg2_error_loop
  440 0000031C                 ENDP
  441 0000031C         ;/*-----------------------------------------------------
                       ------*/
  442 0000031C         
  443 0000031C         vRegTestClearFlopRegistersToParameterValue
                               PROC
  444 0000031C         
  445 0000031C         ; /* Clobber the auto saved registers. */
  446 0000031C EC40 0B10       vmov             d0, r0, r0
  447 00000320 EC40 0B11       vmov             d1, r0, r0
  448 00000324 EC40 0B12       vmov             d2, r0, r0
  449 00000328 EC40 0B13       vmov             d3, r0, r0
  450 0000032C EC40 0B14       vmov             d4, r0, r0
  451 00000330 EC40 0B15       vmov             d5, r0, r0
  452 00000334 EC40 0B16       vmov             d6, r0, r0
  453 00000338 EC40 0B17       vmov             d7, r0, r0
  454 0000033C 4770            bx               lr
  455 0000033E                 ENDP
  456 0000033E         ;/*-----------------------------------------------------
                       ------*/
  457 0000033E         
  458 0000033E         ulRegTestCheckFlopRegistersContainParameterValue
                               PROC
  459 0000033E         
  460 0000033E EE10 1A10       vmov             r1, s0
  461 00000342 4288            cmp              r0, r1
  462 00000344 D13E            bne              return_error
  463 00000346 EE10 1A90       vmov             r1, s1
  464 0000034A 4288            cmp              r0, r1



ARM Macro Assembler    Page 10 


  465 0000034C D13A            bne              return_error
  466 0000034E EE11 1A10       vmov             r1, s2
  467 00000352 4288            cmp              r0, r1
  468 00000354 D136            bne              return_error
  469 00000356 EE11 1A90       vmov             r1, s3
  470 0000035A 4288            cmp              r0, r1
  471 0000035C D132            bne              return_error
  472 0000035E EE12 1A10       vmov             r1, s4
  473 00000362 4288            cmp              r0, r1
  474 00000364 D12E            bne              return_error
  475 00000366 EE12 1A90       vmov             r1, s5
  476 0000036A 4288            cmp              r0, r1
  477 0000036C D12A            bne              return_error
  478 0000036E EE13 1A10       vmov             r1, s6
  479 00000372 4288            cmp              r0, r1
  480 00000374 D126            bne              return_error
  481 00000376 EE13 1A90       vmov             r1, s7
  482 0000037A 4288            cmp              r0, r1
  483 0000037C D122            bne              return_error
  484 0000037E EE14 1A10       vmov             r1, s8
  485 00000382 4288            cmp              r0, r1
  486 00000384 D11E            bne              return_error
  487 00000386 EE14 1A90       vmov             r1, s9
  488 0000038A 4288            cmp              r0, r1
  489 0000038C D11A            bne              return_error
  490 0000038E EE15 1A10       vmov             r1, s10
  491 00000392 4288            cmp              r0, r1
  492 00000394 D116            bne              return_error
  493 00000396 EE15 1A90       vmov             r1, s11
  494 0000039A 4288            cmp              r0, r1
  495 0000039C D112            bne              return_error
  496 0000039E EE16 1A10       vmov             r1, s12
  497 000003A2 4288            cmp              r0, r1
  498 000003A4 D10E            bne              return_error
  499 000003A6 EE16 1A90       vmov             r1, s13
  500 000003AA 4288            cmp              r0, r1
  501 000003AC D10A            bne              return_error
  502 000003AE EE17 1A10       vmov             r1, s14
  503 000003B2 4288            cmp              r0, r1
  504 000003B4 D106            bne              return_error
  505 000003B6 EE17 1A90       vmov             r1, s15
  506 000003BA 4288            cmp              r0, r1
  507 000003BC D102            bne              return_error
  508 000003BE         
  509 000003BE         return_pass
  510 000003BE F04F 0001       mov              r0, #1
  511 000003C2 4770            bx               lr
  512 000003C4         
  513 000003C4         return_error
  514 000003C4 F04F 0000       mov              r0, #0
  515 000003C8 4770            bx               lr
  516 000003CA                 ENDP
  517 000003CA                 END
              00 00 00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\reg
test.d -o.\regtest.o -IC:\Users\Danie_000\SkyDrive\Documents\SYSC5701\FreeRTOS-
STM32F407VG\MDK-ARM\RTE -IC:\Users\Danie_000\SkyDrive\Documents\SYSC5701\FreeRT
OS-STM32F407VG\MDK-ARM\RTE\Device\STM32F407VG -IC:\Keil\ARM\PACK\ARM\CMSIS\3.20



ARM Macro Assembler    Page 11 


.4\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F4xx_DFP\1.0.5\Device\Include --p
redefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --list=.\regtest.lst .
.\RegTest.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 74 in file ..\RegTest.s
   Uses
      None
Comment: .text unused
reg1_error_loop 00000188

Symbol: reg1_error_loop
   Definitions
      At line 254 in file ..\RegTest.s
   Uses
      At line 217 in file ..\RegTest.s
      At line 219 in file ..\RegTest.s
      At line 221 in file ..\RegTest.s
      At line 223 in file ..\RegTest.s
      At line 225 in file ..\RegTest.s
      At line 227 in file ..\RegTest.s
      At line 229 in file ..\RegTest.s
      At line 231 in file ..\RegTest.s
      At line 233 in file ..\RegTest.s
      At line 235 in file ..\RegTest.s
      At line 237 in file ..\RegTest.s
      At line 239 in file ..\RegTest.s
      At line 241 in file ..\RegTest.s
      At line 257 in file ..\RegTest.s

reg1_error_loopf 0000013A

Symbol: reg1_error_loopf
   Definitions
      At line 209 in file ..\RegTest.s
   Uses
      At line 124 in file ..\RegTest.s
      At line 126 in file ..\RegTest.s
      At line 129 in file ..\RegTest.s
      At line 131 in file ..\RegTest.s
      At line 134 in file ..\RegTest.s
      At line 136 in file ..\RegTest.s
      At line 139 in file ..\RegTest.s
      At line 141 in file ..\RegTest.s
      At line 144 in file ..\RegTest.s
      At line 146 in file ..\RegTest.s
      At line 149 in file ..\RegTest.s
      At line 151 in file ..\RegTest.s
      At line 154 in file ..\RegTest.s
      At line 156 in file ..\RegTest.s
      At line 159 in file ..\RegTest.s
      At line 161 in file ..\RegTest.s
      At line 164 in file ..\RegTest.s
      At line 166 in file ..\RegTest.s
      At line 169 in file ..\RegTest.s
      At line 171 in file ..\RegTest.s
      At line 174 in file ..\RegTest.s
      At line 176 in file ..\RegTest.s
      At line 179 in file ..\RegTest.s
      At line 181 in file ..\RegTest.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 184 in file ..\RegTest.s
      At line 186 in file ..\RegTest.s
      At line 189 in file ..\RegTest.s
      At line 191 in file ..\RegTest.s
      At line 194 in file ..\RegTest.s
      At line 196 in file ..\RegTest.s
      At line 199 in file ..\RegTest.s
      At line 201 in file ..\RegTest.s
      At line 212 in file ..\RegTest.s

reg1_loop 00000074

Symbol: reg1_loop
   Definitions
      At line 117 in file ..\RegTest.s
   Uses
      At line 252 in file ..\RegTest.s
Comment: reg1_loop used once
reg1_loopf_pass 0000013C

Symbol: reg1_loopf_pass
   Definitions
      At line 214 in file ..\RegTest.s
   Uses
      At line 207 in file ..\RegTest.s
Comment: reg1_loopf_pass used once
reg2_error_loop 0000031A

Symbol: reg2_error_loop
   Definitions
      At line 436 in file ..\RegTest.s
   Uses
      At line 398 in file ..\RegTest.s
      At line 400 in file ..\RegTest.s
      At line 402 in file ..\RegTest.s
      At line 404 in file ..\RegTest.s
      At line 406 in file ..\RegTest.s
      At line 408 in file ..\RegTest.s
      At line 410 in file ..\RegTest.s
      At line 412 in file ..\RegTest.s
      At line 414 in file ..\RegTest.s
      At line 416 in file ..\RegTest.s
      At line 418 in file ..\RegTest.s
      At line 420 in file ..\RegTest.s
      At line 422 in file ..\RegTest.s
      At line 439 in file ..\RegTest.s

reg2_error_loopf 000002CA

Symbol: reg2_error_loopf
   Definitions
      At line 390 in file ..\RegTest.s
   Uses
      At line 305 in file ..\RegTest.s
      At line 307 in file ..\RegTest.s
      At line 310 in file ..\RegTest.s
      At line 312 in file ..\RegTest.s
      At line 315 in file ..\RegTest.s
      At line 317 in file ..\RegTest.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 320 in file ..\RegTest.s
      At line 322 in file ..\RegTest.s
      At line 325 in file ..\RegTest.s
      At line 327 in file ..\RegTest.s
      At line 330 in file ..\RegTest.s
      At line 332 in file ..\RegTest.s
      At line 335 in file ..\RegTest.s
      At line 337 in file ..\RegTest.s
      At line 340 in file ..\RegTest.s
      At line 342 in file ..\RegTest.s
      At line 345 in file ..\RegTest.s
      At line 347 in file ..\RegTest.s
      At line 350 in file ..\RegTest.s
      At line 352 in file ..\RegTest.s
      At line 355 in file ..\RegTest.s
      At line 357 in file ..\RegTest.s
      At line 360 in file ..\RegTest.s
      At line 362 in file ..\RegTest.s
      At line 365 in file ..\RegTest.s
      At line 367 in file ..\RegTest.s
      At line 370 in file ..\RegTest.s
      At line 372 in file ..\RegTest.s
      At line 375 in file ..\RegTest.s
      At line 377 in file ..\RegTest.s
      At line 380 in file ..\RegTest.s
      At line 382 in file ..\RegTest.s
      At line 393 in file ..\RegTest.s

reg2_loop 000001FE

Symbol: reg2_loop
   Definitions
      At line 297 in file ..\RegTest.s
   Uses
      At line 434 in file ..\RegTest.s
Comment: reg2_loop used once
reg2_loopf_pass 000002CC

Symbol: reg2_loopf_pass
   Definitions
      At line 395 in file ..\RegTest.s
   Uses
      At line 388 in file ..\RegTest.s
Comment: reg2_loopf_pass used once
return_error 000003C4

Symbol: return_error
   Definitions
      At line 513 in file ..\RegTest.s
   Uses
      At line 462 in file ..\RegTest.s
      At line 465 in file ..\RegTest.s
      At line 468 in file ..\RegTest.s
      At line 471 in file ..\RegTest.s
      At line 474 in file ..\RegTest.s
      At line 477 in file ..\RegTest.s
      At line 480 in file ..\RegTest.s
      At line 483 in file ..\RegTest.s
      At line 486 in file ..\RegTest.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 489 in file ..\RegTest.s
      At line 492 in file ..\RegTest.s
      At line 495 in file ..\RegTest.s
      At line 498 in file ..\RegTest.s
      At line 501 in file ..\RegTest.s
      At line 504 in file ..\RegTest.s
      At line 507 in file ..\RegTest.s

return_pass 000003BE

Symbol: return_pass
   Definitions
      At line 509 in file ..\RegTest.s
   Uses
      None
Comment: return_pass unused
ulRegTestCheckFlopRegistersContainParameterValue 0000033E

Symbol: ulRegTestCheckFlopRegistersContainParameterValue
   Definitions
      At line 458 in file ..\RegTest.s
   Uses
      At line 78 in file ..\RegTest.s
Comment: ulRegTestCheckFlopRegistersContainParameterValue used once
vRegTest1Task 00000000

Symbol: vRegTest1Task
   Definitions
      At line 82 in file ..\RegTest.s
   Uses
      At line 75 in file ..\RegTest.s
Comment: vRegTest1Task used once
vRegTest2Task 0000018A

Symbol: vRegTest2Task
   Definitions
      At line 262 in file ..\RegTest.s
   Uses
      At line 76 in file ..\RegTest.s
Comment: vRegTest2Task used once
vRegTestClearFlopRegistersToParameterValue 0000031C

Symbol: vRegTestClearFlopRegistersToParameterValue
   Definitions
      At line 443 in file ..\RegTest.s
   Uses
      At line 77 in file ..\RegTest.s
Comment: vRegTestClearFlopRegistersToParameterValue used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ulRegTest1LoopCounter 00000000

Symbol: ulRegTest1LoopCounter
   Definitions
      At line 72 in file ..\RegTest.s
   Uses
      At line 245 in file ..\RegTest.s
Comment: ulRegTest1LoopCounter used once
ulRegTest2LoopCounter 00000000

Symbol: ulRegTest2LoopCounter
   Definitions
      At line 73 in file ..\RegTest.s
   Uses
      At line 427 in file ..\RegTest.s
Comment: ulRegTest2LoopCounter used once
2 symbols
352 symbols in table
